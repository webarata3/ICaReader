apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "net.kuwalab.android.icareader"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 130
        versionName "1.3.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// JaCoCo
// task test jacocoTestReport
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.1"
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

// FindBugs
// FindBugs plugin
// task findbugs
// レポート build/reports/findbugs/main.xml
apply plugin: 'findbugs'

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low" // ＊どのレベルの報告まで対応するかで変更＊
    excludeFilter = new File("${project.rootDir}/findbugs_filter.xml")
    classes = files("${project.rootDir}/app/build/intermediates/classes/release/")
    source 'src/main'
    include '**/*.java'
    reports {
        xml {
            destination file("${project.rootDir}/app/build/reports/findbugs_report.xml")
        }
    }
    classpath = files()
}
